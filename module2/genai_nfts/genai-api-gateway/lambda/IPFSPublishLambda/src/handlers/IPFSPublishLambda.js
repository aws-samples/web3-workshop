// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT-0
import { NFTStorage, File } from "nft.storage";
import { GetObjectCommand, S3Client } from "@aws-sdk/client-s3";
import { SSMClient, GetParameterCommand } from "@aws-sdk/client-ssm";
import AmazonS3URI from "amazon-s3-uri";

export const handler = async (event, context) => {
  // Logs the input event in CloudWatch
  console.log(JSON.stringify(event));

  try {
    // Getting the NFT.storage API key from SSM Parameter Store
    const ssmClient = new SSMClient();
    const response = await ssmClient.send(
      new GetParameterCommand({
        Name: "/web3/nftstorage/apitoken",
      })
    );
    const nftStorageApiToken = response.Parameter.Value;

    // NFT.Storage client
    const nftStorageClient = new NFTStorage({ token: nftStorageApiToken });

    const {
      sub,
      userKeyId,
      BucketUrl,
      ownerAddress,
      walletAddress,
      ImagePrompt,
    } = event;
    // Extract bucket and key from S3 URL
    const { bucket, key } = AmazonS3URI(BucketUrl);

    // Get file from S3
    const s3Client = new S3Client({});
    const command = new GetObjectCommand({
      Bucket: bucket,
      Key: key,
    });
    const { Body } = await s3Client.send(command);
    const blob = await Body.transformToByteArray();

    // Upload file to NFT.storage
    const filename = "nft-aws-workshop-" + Date.now() + ".png";
    const imageFile = new File([blob], filename, {
      type: "image/png",
    });

    const metadata = await nftStorageClient.store({
      name: ImagePrompt,
      description: "NFT Generated by AWS Sagemaker for Web3 Workshop",
      image: imageFile,
    });

    const returnValue = {
      statusCode: 200,
      body: {
        sub,
        userKeyId,
        BucketUrl,
        ownerAddress,
        walletAddress,
        prompt: ImagePrompt,
        metadataURI: metadata.url,
      },
    };

    return returnValue;
  } catch (error) {
    console.error("Error:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ message: "Internal Server Error" }),
    };
  }
};
