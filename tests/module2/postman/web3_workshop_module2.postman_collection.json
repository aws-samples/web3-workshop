{
	"info": {
		"_postman_id": "6feca835-5894-4d8e-95a0-ab9f10188ac3",
		"name": "web3_workshop_module2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30633627"
	},
	"item": [
		{
			"name": "Mint GenAI NFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"0x\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"prompt\": \"An end-to-end integration tests--beautify\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai"
					]
				},
				"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
			},
			"response": []
		},
		{
			"name": "Get all GenAI NFTs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"if (jsonData.nfts.length === 0) { // Some condition to decide if retrying the request is needed",
							"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
							"  postman.setNextRequest(pm.info.requestId); // retry the current request",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai"
					]
				},
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		},
		{
			"name": "Get first GenAI NFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"A contractAddress is returned\", () => {",
							"    pm.expect(jsonData.nfts).to.be.an(\"array\")",
							"    pm.expect(jsonData.nfts[0]).to.have.property('contractAddress');",
							"    pm.expect(jsonData.nfts[0].contractAddress).to.be.a('string');",
							"});",
							"",
							"pm.test(\"An owner is returned\", () => {",
							"    pm.expect(jsonData.nfts[0]).to.have.property('owner');",
							"    pm.expect(jsonData.nfts[0].owner).to.be.a('string');",
							"});",
							"",
							"pm.test(\"A collectionId is returned\", () => {",
							"    pm.expect(jsonData.nfts[0]).to.have.property('collectionId');",
							"    pm.expect(jsonData.nfts[0].collectionId).to.eql('genai');",
							"});",
							"",
							"pm.test(\"An image url is returned\", () => {",
							"    pm.expect(jsonData.nfts[0]).to.have.property('imageUrl');",
							"    pm.expect(jsonData.nfts[0].imageUrl).to.be.a('string');",
							"    pm.expect(jsonData.nfts[0].imageUrl).to.inclue('nft-aws-workshop');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai/1",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai",
						"1"
					]
				},
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		},
		{
			"name": "Burn First GenAI NFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"0x\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai/1",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai",
						"1"
					]
				},
				"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
			},
			"response": []
		},
		{
			"name": "Get all GenAI NFTs (one)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"if (jsonData.nfts.length === 1) { // Some condition to decide if retrying the request is needed",
							"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
							"  postman.setNextRequest(pm.info.requestId); // retry the current request",
							"}",
							"",
							"pm.test(\"Returns 200 OK status\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai"
					]
				},
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		},
		{
			"name": "Get burned GenAI NFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai/1",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai",
						"1"
					]
				},
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		},
		{
			"name": "Mint Second GenAI NFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 OK status\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"0x\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"prompt\": \"my second sentence NFT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai"
					]
				},
				"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
			},
			"response": []
		},
		{
			"name": "Get all GenAI NFTs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"if (jsonData.nfts.length === 0) { // Some condition to decide if retrying the request is needed",
							"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
							"  postman.setNextRequest(pm.info.requestId); // retry the current request",
							"}",
							"",
							"pm.test(\"Returns 200 OK status\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai"
					]
				},
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		},
		{
			"name": "Transfer Second GenAI NFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Returns 200 status\", () => {",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"toAddress\": \"0x9ab28688aD825386356cD340761b023f9F8c307D\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai/2",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai",
						"2"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				},
				"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
			},
			"response": []
		},
		{
			"name": "Get second GenAI NFT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"if (jsonData.nfts[0].owner !== \"0x9ab28688aD825386356cD340761b023f9F8c307D\") { // Some condition to decide if retrying the request is needed",
							"  setTimeout(() => {}, 1000); // wait for 1 second before retrying",
							"",
							"  postman.setNextRequest(pm.info.requestId); // retry the current request",
							"} else {",
							"    pm.test(\"Body includes new owner's address\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"0x9ab28688aD825386356cD340761b023f9F8c307D\");",
							"});",
							"}",
							"",
							"pm.test(\"Returns 200 OK status\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}tokens/genai/2",
					"host": [
						"{{baseUrl}}tokens"
					],
					"path": [
						"genai",
						"2"
					]
				},
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		}
	]
}